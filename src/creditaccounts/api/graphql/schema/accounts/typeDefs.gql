scalar Date

interface CreditAccount {
	creditCode: String!
	type: CreditAccountType!
	originalCredits: Int!
	originalMoney: Float!
	availableCredits: Int!
	availableMoney: Float!
	email: String!
	dateCreated: Date!
	dateExpired: Date!
}

type GiftAccount implements CreditAccount {
	creditCode: String!
	type: CreditAccountType!
	originalCredits: Int!
	originalMoney: Float!
	availableCredits: Int!
	availableMoney: Float!
	email: String!
	dateCreated: Date!
	dateExpired: Date!
}

type PrepaidAccount implements CreditAccount {
	creditCode: String!
	type: CreditAccountType!
	originalCredits: Int!
	originalMoney: Float!
	availableCredits: Int!
	availableMoney: Float!
	email: String!
	dateCreated: Date!
	dateExpired: Date!
	treatmentCount: Int!
	discountPercentage: Float!
}

type Transaction {
	creditCode: String!
	creditsUsed: Int!
	moneyUsed: Int!
	transactionDate: Date!
}

input CreateGiftAccountInput {
	purchaseAmount: Float!
	email: String!
}

input CreatePrepaidAccountInput {
	treatmentCount: Int!
	pricePerTreatment: Float!
	email: String!
}

input UseCreditsInput {
	creditCode: String!
	cost: Int!
}

extend type Query {
	creditAccounts: [CreditAccount!]
	creditAccount(id: Int!): CreditAccount
}

type Mutation {
	createGiftAccount(input: CreateGiftAccountInput!): GiftAccount!
	createPrepaidAccount(input: CreatePrepaidAccountInput!): PrepaidAccount!
	useCredits(input: UseCreditsInput!): Transaction!
}

enum CreditAccountType {
	GIFT_CARD
	PREPAID_CARD
}
